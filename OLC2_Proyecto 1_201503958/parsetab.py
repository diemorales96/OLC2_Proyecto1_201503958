
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightUNOTleftMENORQUEMAYORQUEIGUALIGUALDIFERENTEMENORIGUALMAYORIGUALleftMASMENOSleftDIVPORMODnonassocPOTrightUMENOSAND CADENA CARACTER COMA DECIMAL DIFERENTE DIV DOBLEDPUNTOS DOSPUNTOS ENTERO ID IGUAL IGUALIGUAL MAS MAYORIGUAL MAYORQUE MENORIGUAL MENORQUE MENOS MOD NOT OR PARA PARC POR POT PUNTOCOMA RBOOLEAN RBREAK RCHAR RCONTINUE RDOUBLE RELSE RELSEIF REND RFALSE RFOR RFUNCTION RIF RIN RINT RNULO RPARSE RPRINT RPRINTLN RRETURN RSTRING RTRUE RWHILEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : imprimir_instr finins\n                        | imprimir_ins finins\n                        | declaracion finins\n                        | if_instr finins\n                        | while_instr finins\n                        | for_instr finins\n                        | break_instr finins\n                        | continue_instr finins\n                        | funcion_instr finins\n                        | return_instr finins\n                        | llamada_instr finins\n    finins       : PUNTOCOMAinstruccion        : error PUNTOCOMAimprimir_instr     : RPRINTLN PARA expresion PARCimprimir_ins     : RPRINT PARA expresion PARC declaracion     : declaracion_instr_completa\n                        | declaracion_instr_simple\n    if_instr     : RIF expresion instrucciones REND\n    if_instr     : RIF expresion instrucciones RELSE instrucciones REND\n    if_instr      : RIF expresion instrucciones elseif_instr RELSE instrucciones REND\n    elseif_instr     : elseif_instr elseif_instruction\n    elseif_instr     : elseif_instruction\n    elseif_instruction   : RELSEIF expresion instrucciones \n    while_instr : RWHILE expresion instrucciones REND\n    for_instr    : RFOR ID RIN expresion DOSPUNTOS expresion instrucciones REND\n    for_instr    : RFOR ID RIN expresion instrucciones REND\n    break_instr  : RBREAK\n    continue_instr   : RCONTINUE\n     declaracion_instr_simple     : ID IGUAL expresion\n    declaracion_instr_completa   : ID IGUAL expresion DOBLEDPUNTOS tipo\n    funcion_instr    : RFUNCTION ID PARA parametros PARC instrucciones RENDfuncion_instr     : RFUNCTION ID PARA PARC instrucciones RENDparametros     : parametros COMA parametroparametros      : parametroparametro      : ID DOBLEDPUNTOS tiporeturn_instr     : RRETURN expresionllamada_instr     : ID PARA PARCllamada_instr     : ID PARA parametros_llamada PARCparametros_llamada     : parametros_llamada COMA parametro_llamadaparametros_llamada    : parametro_llamadaparametro_llamada     : expresiontipo     : RINT\n                | RDOUBLE\n                | RCHAR\n                | RSTRING\n                | RBOOLEAN \n    expresion   : expresion MAS expresion\n                | expresion MENOS expresion\n                | expresion POR expresion\n                | expresion DIV expresion\n                | expresion POT expresion\n                | expresion MOD expresion\n                | expresion MENORQUE expresion\n                | expresion MAYORQUE expresion\n                | expresion MENORIGUAL expresion\n                | expresion MAYORIGUAL expresion\n                | expresion IGUALIGUAL expresion\n                | expresion DIFERENTE expresion\n                | expresion OR expresion\n                | expresion AND expresion\n                | expresion COMA expresion\n    \n    expresion : MENOS expresion %prec UMENOS\n              | NOT expresion %prec UNOT \n    \n    expresion   : PARA expresion PARC\n    expresion : IDexpresion : ENTEROexpresion : DECIMALexpresion : CADENAexpresion : CARACTERexpresion : RTRUEexpresion : RFALSEexpresion : RPARSE PARA tipo COMA expresion PARC\n    '
    
_lr_action_items = {'error':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[15,15,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,15,-68,-69,-70,-71,-72,-73,-74,15,15,-65,-66,15,15,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,15,15,15,15,15,15,15,15,15,15,15,15,-75,15,]),'RPRINTLN':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[16,16,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,16,-68,-69,-70,-71,-72,-73,-74,16,16,-65,-66,16,16,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,16,16,16,16,16,16,16,16,16,16,16,16,-75,16,]),'RPRINT':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[17,17,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,17,-68,-69,-70,-71,-72,-73,-74,17,17,-65,-66,17,17,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,17,17,17,17,17,17,17,17,17,17,17,17,-75,17,]),'RIF':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[20,20,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,20,-68,-69,-70,-71,-72,-73,-74,20,20,-65,-66,20,20,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,20,20,20,20,20,20,20,20,20,20,20,20,-75,20,]),'RWHILE':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[21,21,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,21,-68,-69,-70,-71,-72,-73,-74,21,21,-65,-66,21,21,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,21,21,21,21,21,21,21,21,21,21,21,21,-75,21,]),'RFOR':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[22,22,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,22,-68,-69,-70,-71,-72,-73,-74,22,22,-65,-66,22,22,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,22,22,22,22,22,22,22,22,22,22,22,22,-75,22,]),'RBREAK':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[24,24,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,24,-68,-69,-70,-71,-72,-73,-74,24,24,-65,-66,24,24,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,24,24,24,24,24,24,24,24,24,24,24,24,-75,24,]),'RCONTINUE':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[25,25,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,25,-68,-69,-70,-71,-72,-73,-74,25,25,-65,-66,25,25,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,25,25,25,25,25,25,25,25,25,25,25,25,-75,25,]),'RFUNCTION':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[26,26,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,26,-68,-69,-70,-71,-72,-73,-74,26,26,-65,-66,26,26,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,26,26,26,26,26,26,26,26,26,26,26,26,-75,26,]),'RRETURN':([0,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,48,49,50,51,52,53,54,56,64,80,81,84,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,130,131,133,136,140,142,144,145,147,150,154,155,],[27,27,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,27,-68,-69,-70,-71,-72,-73,-74,27,27,-65,-66,27,27,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,27,27,27,27,27,27,27,27,27,27,27,27,-75,27,]),'ID':([0,2,3,20,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,91,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,124,128,130,131,133,134,135,136,140,141,142,144,145,147,150,154,155,],[23,23,-3,48,48,57,60,48,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,48,48,23,48,48,48,-68,-69,-70,-71,-72,-73,-74,23,48,48,23,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-65,-66,23,48,126,23,48,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,23,48,23,23,23,23,48,48,23,23,126,23,23,23,23,23,-75,23,]),'$end':([1,2,3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[0,-1,-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,]),'REND':([3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,64,84,130,136,142,144,150,155,],[-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,94,121,143,148,152,153,156,157,]),'RELSE':([3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,64,96,97,132,145,],[-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,95,131,-25,-24,-26,]),'RELSEIF':([3,28,29,30,31,32,33,34,35,36,37,38,39,40,41,64,96,97,132,145,],[-3,-2,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,98,98,-25,-24,-26,]),'PUNTOCOMA':([4,5,6,7,8,9,10,11,12,13,14,15,18,19,24,25,48,49,50,51,52,53,54,61,80,81,86,90,92,93,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,123,138,143,148,152,153,154,156,157,],[30,30,30,30,30,30,30,30,30,30,30,41,-19,-20,-30,-31,-68,-69,-70,-71,-72,-73,-74,-39,-65,-66,-40,-32,-17,-18,-21,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-45,-46,-47,-48,-49,-27,-41,-33,-22,-29,-35,-23,-75,-34,-28,]),'PARA':([16,17,20,21,23,27,42,43,45,46,47,55,58,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[42,43,47,47,58,47,47,47,47,47,47,83,47,47,91,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'MENOS':([20,21,27,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,89,90,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,124,133,134,135,146,147,154,],[45,45,45,45,45,66,45,45,45,-68,-69,-70,-71,-72,-73,-74,66,45,45,66,66,66,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-65,66,66,45,66,66,45,-50,-51,-52,-53,-54,-55,66,66,66,66,66,66,66,66,66,-67,66,45,66,45,45,66,66,-75,]),'NOT':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'ENTERO':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'DECIMAL':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'CADENA':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'CARACTER':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'RTRUE':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'RFALSE':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'RPARSE':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'IGUAL':([23,],[59,]),'MAS':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[65,-68,-69,-70,-71,-72,-73,-74,65,65,65,65,-65,65,65,65,65,-50,-51,-52,-53,-54,-55,65,65,65,65,65,65,65,65,65,-67,65,65,65,65,-75,]),'POR':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[67,-68,-69,-70,-71,-72,-73,-74,67,67,67,67,-65,67,67,67,67,67,67,-52,-53,-54,-55,67,67,67,67,67,67,67,67,67,-67,67,67,67,67,-75,]),'DIV':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[68,-68,-69,-70,-71,-72,-73,-74,68,68,68,68,-65,68,68,68,68,68,68,-52,-53,-54,-55,68,68,68,68,68,68,68,68,68,-67,68,68,68,68,-75,]),'POT':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[69,-68,-69,-70,-71,-72,-73,-74,69,69,69,69,-65,69,69,69,69,69,69,69,69,None,69,69,69,69,69,69,69,69,69,69,-67,69,69,69,69,-75,]),'MOD':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[70,-68,-69,-70,-71,-72,-73,-74,70,70,70,70,-65,70,70,70,70,70,70,-52,-53,-54,-55,70,70,70,70,70,70,70,70,70,-67,70,70,70,70,-75,]),'MENORQUE':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[71,-68,-69,-70,-71,-72,-73,-74,71,71,71,71,-65,71,71,71,71,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,71,71,71,-67,71,71,71,71,-75,]),'MAYORQUE':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[72,-68,-69,-70,-71,-72,-73,-74,72,72,72,72,-65,72,72,72,72,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,72,72,72,-67,72,72,72,72,-75,]),'MENORIGUAL':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[73,-68,-69,-70,-71,-72,-73,-74,73,73,73,73,-65,73,73,73,73,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,73,73,73,-67,73,73,73,73,-75,]),'MAYORIGUAL':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[74,-68,-69,-70,-71,-72,-73,-74,74,74,74,74,-65,74,74,74,74,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,74,74,74,-67,74,74,74,74,-75,]),'IGUALIGUAL':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[75,-68,-69,-70,-71,-72,-73,-74,75,75,75,75,-65,75,75,75,75,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,75,75,75,-67,75,75,75,75,-75,]),'DIFERENTE':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[76,-68,-69,-70,-71,-72,-73,-74,76,76,76,76,-65,76,76,76,76,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,76,76,76,-67,76,76,76,76,-75,]),'OR':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[77,-68,-69,-70,-71,-72,-73,-74,77,77,77,77,-65,-66,77,77,77,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,77,-67,77,77,77,77,-75,]),'AND':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,133,146,147,154,],[78,-68,-69,-70,-71,-72,-73,-74,78,78,78,78,-65,-66,78,78,78,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,78,-63,78,-67,78,78,78,78,-75,]),'COMA':([44,48,49,50,51,52,53,54,56,61,62,63,80,81,82,87,88,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,127,129,133,137,146,147,149,151,154,],[79,-68,-69,-70,-71,-72,-73,-74,79,79,79,79,-65,-66,79,124,-43,79,79,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,79,-67,134,-45,-46,-47,-48,-49,79,141,-37,79,-42,79,79,-38,-36,-75,]),'PARC':([48,49,50,51,52,53,54,58,62,63,80,81,82,87,88,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,127,129,137,146,149,151,154,],[-68,-69,-70,-71,-72,-73,-74,86,92,93,-65,-66,114,123,-43,-44,128,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-45,-46,-47,-48,-49,140,-37,-42,154,-38,-36,-75,]),'DOBLEDPUNTOS':([48,49,50,51,52,53,54,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,126,154,],[-68,-69,-70,-71,-72,-73,-74,-65,-66,125,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,139,-75,]),'DOSPUNTOS':([48,49,50,51,52,53,54,80,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,154,],[-68,-69,-70,-71,-72,-73,-74,-65,-66,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,135,-75,]),'RIN':([57,],[85,]),'RINT':([83,125,139,],[116,116,116,]),'RDOUBLE':([83,125,139,],[117,117,117,]),'RCHAR':([83,125,139,],[118,118,118,]),'RSTRING':([83,125,139,],[119,119,119,]),'RBOOLEAN':([83,125,139,],[120,120,120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,44,56,95,122,128,131,133,140,147,],[2,64,84,130,136,142,144,145,150,155,]),'instruccion':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[3,28,3,3,28,28,3,3,3,28,3,3,28,3,28,28,28,3,28,28,]),'imprimir_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'imprimir_ins':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'declaracion':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'break_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'continue_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'funcion_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'return_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'llamada_instr':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'declaracion_instr_completa':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'declaracion_instr_simple':([0,2,44,56,64,84,95,122,128,130,131,133,136,140,142,144,145,147,150,155,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'finins':([4,5,6,7,8,9,10,11,12,13,14,],[29,31,32,33,34,35,36,37,38,39,40,]),'expresion':([20,21,27,42,43,45,46,47,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,98,124,134,135,],[44,56,61,62,63,80,81,82,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,133,89,146,147,]),'parametros_llamada':([58,],[87,]),'parametro_llamada':([58,124,],[88,137,]),'elseif_instr':([64,],[96,]),'elseif_instruction':([64,96,],[97,132,]),'tipo':([83,125,139,],[115,138,149,]),'parametros':([91,],[127,]),'parametro':([91,141,],[129,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',192),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_instrucciones_instruccion','grammar.py',196),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',202),
  ('instruccion -> imprimir_instr finins','instruccion',2,'p_instruccion','grammar.py',209),
  ('instruccion -> imprimir_ins finins','instruccion',2,'p_instruccion','grammar.py',210),
  ('instruccion -> declaracion finins','instruccion',2,'p_instruccion','grammar.py',211),
  ('instruccion -> if_instr finins','instruccion',2,'p_instruccion','grammar.py',212),
  ('instruccion -> while_instr finins','instruccion',2,'p_instruccion','grammar.py',213),
  ('instruccion -> for_instr finins','instruccion',2,'p_instruccion','grammar.py',214),
  ('instruccion -> break_instr finins','instruccion',2,'p_instruccion','grammar.py',215),
  ('instruccion -> continue_instr finins','instruccion',2,'p_instruccion','grammar.py',216),
  ('instruccion -> funcion_instr finins','instruccion',2,'p_instruccion','grammar.py',217),
  ('instruccion -> return_instr finins','instruccion',2,'p_instruccion','grammar.py',218),
  ('instruccion -> llamada_instr finins','instruccion',2,'p_instruccion','grammar.py',219),
  ('finins -> PUNTOCOMA','finins',1,'p_finins','grammar.py',224),
  ('instruccion -> error PUNTOCOMA','instruccion',2,'p_instruccion_error','grammar.py',228),
  ('imprimir_instr -> RPRINTLN PARA expresion PARC','imprimir_instr',4,'p_imprimir','grammar.py',233),
  ('imprimir_ins -> RPRINT PARA expresion PARC','imprimir_ins',4,'p_imprimir2','grammar.py',237),
  ('declaracion -> declaracion_instr_completa','declaracion',1,'p_declaracion','grammar.py',241),
  ('declaracion -> declaracion_instr_simple','declaracion',1,'p_declaracion','grammar.py',242),
  ('if_instr -> RIF expresion instrucciones REND','if_instr',4,'p_if1','grammar.py',247),
  ('if_instr -> RIF expresion instrucciones RELSE instrucciones REND','if_instr',6,'p_if2','grammar.py',253),
  ('if_instr -> RIF expresion instrucciones elseif_instr RELSE instrucciones REND','if_instr',7,'p_if3','grammar.py',259),
  ('elseif_instr -> elseif_instr elseif_instruction','elseif_instr',2,'p_elsif','grammar.py',264),
  ('elseif_instr -> elseif_instruction','elseif_instr',1,'p_elseif_instr','grammar.py',271),
  ('elseif_instruction -> RELSEIF expresion instrucciones','elseif_instruction',3,'p_elseif_instruction','grammar.py',279),
  ('while_instr -> RWHILE expresion instrucciones REND','while_instr',4,'p_while','grammar.py',286),
  ('for_instr -> RFOR ID RIN expresion DOSPUNTOS expresion instrucciones REND','for_instr',8,'p_for','grammar.py',291),
  ('for_instr -> RFOR ID RIN expresion instrucciones REND','for_instr',6,'p_for2','grammar.py',296),
  ('break_instr -> RBREAK','break_instr',1,'p_break','grammar.py',301),
  ('continue_instr -> RCONTINUE','continue_instr',1,'p_continue','grammar.py',307),
  ('declaracion_instr_simple -> ID IGUAL expresion','declaracion_instr_simple',3,'p_declaracion_simple','grammar.py',313),
  ('declaracion_instr_completa -> ID IGUAL expresion DOBLEDPUNTOS tipo','declaracion_instr_completa',5,'p_declaracion_completa','grammar.py',318),
  ('funcion_instr -> RFUNCTION ID PARA parametros PARC instrucciones REND','funcion_instr',7,'p_funcion1','grammar.py',324),
  ('funcion_instr -> RFUNCTION ID PARA PARC instrucciones REND','funcion_instr',6,'p_funcion_2','grammar.py',328),
  ('parametros -> parametros COMA parametro','parametros',3,'p_parametros_1','grammar.py',332),
  ('parametros -> parametro','parametros',1,'p_parametros_2','grammar.py',337),
  ('parametro -> ID DOBLEDPUNTOS tipo','parametro',3,'p_parametro','grammar.py',341),
  ('return_instr -> RRETURN expresion','return_instr',2,'p_return','grammar.py',345),
  ('llamada_instr -> ID PARA PARC','llamada_instr',3,'p_llamada1','grammar.py',349),
  ('llamada_instr -> ID PARA parametros_llamada PARC','llamada_instr',4,'p_llamada2','grammar.py',353),
  ('parametros_llamada -> parametros_llamada COMA parametro_llamada','parametros_llamada',3,'p_parametrosLL_1','grammar.py',357),
  ('parametros_llamada -> parametro_llamada','parametros_llamada',1,'p_parametrosLL_2','grammar.py',362),
  ('parametro_llamada -> expresion','parametro_llamada',1,'p_parametroLL','grammar.py',367),
  ('tipo -> RINT','tipo',1,'p_tipo','grammar.py',373),
  ('tipo -> RDOUBLE','tipo',1,'p_tipo','grammar.py',374),
  ('tipo -> RCHAR','tipo',1,'p_tipo','grammar.py',375),
  ('tipo -> RSTRING','tipo',1,'p_tipo','grammar.py',376),
  ('tipo -> RBOOLEAN','tipo',1,'p_tipo','grammar.py',377),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','grammar.py',393),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','grammar.py',394),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','grammar.py',395),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_binaria','grammar.py',396),
  ('expresion -> expresion POT expresion','expresion',3,'p_expresion_binaria','grammar.py',397),
  ('expresion -> expresion MOD expresion','expresion',3,'p_expresion_binaria','grammar.py',398),
  ('expresion -> expresion MENORQUE expresion','expresion',3,'p_expresion_binaria','grammar.py',399),
  ('expresion -> expresion MAYORQUE expresion','expresion',3,'p_expresion_binaria','grammar.py',400),
  ('expresion -> expresion MENORIGUAL expresion','expresion',3,'p_expresion_binaria','grammar.py',401),
  ('expresion -> expresion MAYORIGUAL expresion','expresion',3,'p_expresion_binaria','grammar.py',402),
  ('expresion -> expresion IGUALIGUAL expresion','expresion',3,'p_expresion_binaria','grammar.py',403),
  ('expresion -> expresion DIFERENTE expresion','expresion',3,'p_expresion_binaria','grammar.py',404),
  ('expresion -> expresion OR expresion','expresion',3,'p_expresion_binaria','grammar.py',405),
  ('expresion -> expresion AND expresion','expresion',3,'p_expresion_binaria','grammar.py',406),
  ('expresion -> expresion COMA expresion','expresion',3,'p_expresion_binaria','grammar.py',407),
  ('expresion -> MENOS expresion','expresion',2,'p_expresion_unaria','grammar.py',442),
  ('expresion -> NOT expresion','expresion',2,'p_expresion_unaria','grammar.py',443),
  ('expresion -> PARA expresion PARC','expresion',3,'p_expresion_agrupacion','grammar.py',452),
  ('expresion -> ID','expresion',1,'p_expresion_identificador','grammar.py',460),
  ('expresion -> ENTERO','expresion',1,'p_expresion_entero','grammar.py',464),
  ('expresion -> DECIMAL','expresion',1,'p_primitivo_decimal','grammar.py',468),
  ('expresion -> CADENA','expresion',1,'p_primitivo_cadena','grammar.py',472),
  ('expresion -> CARACTER','expresion',1,'p_primitivo_caracter','grammar.py',476),
  ('expresion -> RTRUE','expresion',1,'p_primitivo_true','grammar.py',480),
  ('expresion -> RFALSE','expresion',1,'p_primitivo_false','grammar.py',484),
  ('expresion -> RPARSE PARA tipo COMA expresion PARC','expresion',6,'p_expresion_cast','grammar.py',488),
]
